import java.awt.*;
import javax.swing.*;
import java.util.*;
import JavaTOC;

/**
  * The JavaTOC framework is a set of classes used to allow
  * a Java program to communicate with AOL's TOC protocol.
  * The Chatable interface and JavaTOC classes can easily
  * be moved to any program needing TOC abilities.
  *
  *  Copyright 2002 by Jeff Heaton
  *
  *   This program is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU General Public License
  *  as published by the Free Software Foundation; either version 2
  *  of the License, or (at your option) any later version.
  *
  *  This program is distributed in the hope that it will be useful,
  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  *  GNU General Public License for more details.
  *
  *  You should have received a copy of the GNU General Public License
  *  along with this program; if not, write to the Free Software
  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
  *
  * @author Jeff Heaton(http://www.jeffheaton.com)
  * @version 1.0
  */
public class ChatBuddies extends javax.swing.JFrame implements 
Runnable,Chatable {

   /**
    * The login button.
    */
   public ChatLogin login;

   /**
    * A collection of chat windows currently
    * open.
    */
   public Collection chats = new ArrayList(3);

   /**
    * The JavaTOC object used to interface to
    * TOC.
    */
   protected JavaTOC toc = new JavaTOC(this);

   /**
    * The constructor.
    */
   public ChatBuddies()
   {
     getContentPane().setLayout(null);
     setSize(266,133);
     setVisible(false);
     sendIM.setText("OK");
     sendIM.setActionCommand("jbutton");
     getContentPane().add(sendIM);
     sendIM.setBounds(192,96,60,24);
     JLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
     JLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
     JLabel1.setText("any IM\'s that are sent to you. ");
     getContentPane().add(JLabel1);
     JLabel1.setBounds(12,24,240,24);
     getContentPane().add(who);
     who.setBounds(12,96,168,24);
     JLabel2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
     JLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
     JLabel2.setText("You are now connected. You will see");
     getContentPane().add(JLabel2);
     JLabel2.setBounds(12,12,240,24);
     JLabel3.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
     JLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
     JLabel3.setText("Enter a screen name and click ok ");
     getContentPane().add(JLabel3);
     JLabel3.setBounds(12,48,240,24);
     JLabel4.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
     JLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
     JLabel4.setText("to send an IM.");
     getContentPane().add(JLabel4);
     JLabel4.setBounds(12,60,240,24);
     //}}

     //{{INIT_MENUS
     //}}

     //{{REGISTER_LISTENERS
     SymWindow aSymWindow = new SymWindow();
     this.addWindowListener(aSymWindow);
     SymAction lSymAction = new SymAction();
     sendIM.addActionListener(lSymAction);
     //}}
   }

   /**
    * Start up the program.
    *
    * @param args This program does not use command line arguments.
    */
   static public void main(String args[])
   {
     (new ChatBuddies()).setVisible(true);
   }

   /**
    * Generated by VisualCafe
    */
   public void addNotify()
   {
     // Record the size of the window prior to calling parents addNotify.
     Dimension size = getSize();

     super.addNotify();

     if ( frameSizeAdjusted )
       return;
     frameSizeAdjusted = true;

     // Adjust size of frame according to the insets and menu bar
     Insets insets = getInsets();
     javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
     int menuBarHeight = 0;
     if ( menuBar != null )
       menuBarHeight = menuBar.getPreferredSize().height;
     setSize(insets.left + insets.right + size.width, insets.top + 
insets.bottom + size.height + menuBarHeight);
   }

   /**
    * Inserted by Visual Cafe
    */
   // Used by addNotify
   boolean frameSizeAdjusted = false;

   //{{DECLARE_CONTROLS

   /**
    * Send IM button.
    */
   javax.swing.JButton sendIM = new javax.swing.JButton();
   javax.swing.JLabel JLabel1 = new javax.swing.JLabel();

   /**
    * Who are we chatting with.
    */
   javax.swing.JTextField who = new javax.swing.JTextField();
   javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
   javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
   javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
   //}}

   //{{DECLARE_MENUS
   //}}


   class SymWindow extends java.awt.event.WindowAdapter {
     public void windowClosing(java.awt.event.WindowEvent event)
     {
       Object object = event.getSource();
       if ( object == ChatBuddies.this )
         ChatBuddies_windowClosing(event);
     }

     public void windowOpened(java.awt.event.WindowEvent event)
     {
       Object object = event.getSource();
       if ( object == ChatBuddies.this )
         ChatBuddies_windowOpened(event);
     }
   }

   /**
    * Called when the window opens. Uses to immediately
    * hide this window and display the ChatLogin.
    *
    * @param event The event.
    */
   void ChatBuddies_windowOpened(java.awt.event.WindowEvent event)
   {
     this.setVisible(false);
     login = new ChatLogin();
     login.owner = this;
     login.setVisible(true);
   }

   /**
    * The background thread, used to process
    * all incoming TOC messages.
    */
   public void run()
   {
     try {
       if ( toc.login(login.userID.getText(),login.password.getText()) ) {
         this.setVisible(true);
         this.setTitle("Logged in: " + login.userID.getText() );
         login.setVisible(false);
       } else
         return;
       toc.processTOCEvents();
     } catch ( Exception e ) {
     }
   }

   /**
    * Called with an unknown TOC event is found.
    *
    * @param str The TOC event.
    */
   public void unknown(String str)
   {
   }

   /**
    * Called when an incoming instant message
    * is received.
    *
    * @param from Who the IM is from
    * @param message The IM message
    */
   public void im(String from,String message)
   {
     Iterator itr = chats.iterator();
     while ( itr.hasNext() ) {
       ChatWindow window = (ChatWindow)itr.next();
       if ( window.with.equalsIgnoreCase(from) ) {

         if ( message!=null )
           window.addMessage("<b><font color=\"blue\">" + from + 
"</font></b>",message);
         window.setVisible(true);
         return;
       }
     }

     ChatWindow window = new ChatWindow();
     window.setTitle("Chatting with " + from );
     window.with = from;
     window.owner = this;
     if ( message!=null )
       window.addMessage("<b><font color=\"blue\">" + from + 
"</font></b>",message);
     window.setVisible(true);
     chats.add(window);
   }

   /**
    * Called when an IM error occurs.
    *
    * @param str The error
    * @param var A paramter that goes into some error messages
    */
   public void error(String str,String var)
   {
     String error;

     switch ( Integer.parseInt(str) ) {
     case 901:error="$1 not currently available";break;
     case 902:error="Warning of $1 not currently available";break;
     case 903:error="A message has been dropped, you are exceeding the server speed limit";break;
     case 911:error="Error validating input";break;
     case 912:error="Invalid account";break;
     case 913:error="Error encountered while processing request";break;
     case 914:error="Service unavailable";break;
     case 950:error="Chat in $1 is unavailable.";break;
     case 960:error="You are sending message too fast to $1";break;
     case 961:error="You missed an im from $1 because it was too big.";break;
     case 962:error="You missed an im from $1 because it was sent too fast.";break;
     case 970:error="Failure";break;
     case 971:error="Too many matches";break;
     case 972:error="Need more qualifiers";break;
     case 973:error="Dir service temporarily unavailable";break;
     case 974:error="Email lookup restricted";break;
     case 975:error="Keyword Ignored";break;
     case 976:error="No Keywords";break;
     case 977:error="Language not supported";break;
     case 978:error="Country not supported";break;
     case 979:error="Failure unknown $1";break;
     case 980:error="Incorrect nickname or password.";break;
     case 981:error="The service is temporarily unavailable.";break;
     case 982:error="Your warning level is currently too high to sign on.";break;
     case 983:error="You have been connecting and disconnecting too frequently.\nWait 10 minutes and try again.\n If you continue to try, you will need to wait even longer.";break;
     case 989:error="An unknown signon error has occurred $1";break;
     default:error="Unknown";break;

     }
     int i = error.indexOf("$1");
     if ( i!=-1 ) {
       error = error.substring(0,i);
       error+= var;
       error+= error.substring(i+2);
     }

     JOptionPane.showMessageDialog(this,
                                   error,
                                   "Error",
                                   JOptionPane.OK_CANCEL_OPTION,
                                   null );
   }

   /**
    * Called from the ChatLogin class to request
    * that the user attempt to be logged in.
    */
   public void requestLogin()
   {
     try {
       Thread t = new Thread(this);
       t.start();
     } catch ( Exception e ) {
     }

   }

   /**
    * Called when the window is closing. This
    * method breaks the TOC connection.
    *
    * @param event The event.
    */
   void ChatBuddies_windowClosing(java.awt.event.WindowEvent event)
   {
     login.setVisible(true);
     toc.logout();
     toc = new JavaTOC(this);
   }

   /**
    * Called by the ChatWindow to request that
    * an IM message be sent.
    *
    * @param to Who is this message to
    * @param msg The message
    */
   public void requestIM(String to,String msg)
   {
     toc.send(to,msg);
   }

   class SymAction implements java.awt.event.ActionListener {
     public void actionPerformed(java.awt.event.ActionEvent event)
     {
       Object object = event.getSource();
       if ( object == sendIM )
         sendIM_actionPerformed(event);
     }
   }

   /**
    * Called when the user clicks the send IM
    * button. This method launches a ChatWindow.
    *
    * @param event The event
    */
   void sendIM_actionPerformed(java.awt.event.ActionEvent event)
   {
     this.im(this.who.getText(),null);


   }
}